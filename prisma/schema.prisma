// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User approval system
  isApproved    Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  approvedAt    DateTime?
  approvedById  String?
  approvedBy    User?     @relation("UserApprovals", fields: [approvedById], references: [id])
  approvedUsers User[]    @relation("UserApprovals")
  
  // Upload settings
  maxUploads    Int     @default(100)
  maxFileSize   Int     @default(10485760) // 10MB
  maxStorageLimit Int?  // Custom storage limit, null means use default from env
  storageUsed   Int     @default(0)
  
  // Discord embed settings
  embedTitle    String?   @default("File Upload")
  embedDescription String? @default("Uploaded via twink.forsale")
  embedColor    String?   @default("#8B5CF6") // Purple color
  embedAuthor   String?   // Author name
  embedFooter   String?   @default("twink.forsale")
  showFileInfo  Boolean   @default(true) // Show file size, type etc
  showUploadDate Boolean  @default(true)
  showUserStats Boolean   @default(false) // Show user stats (files uploaded, storage used, total views)
  customDomain  String?   // Custom domain for embeds
  
  // Upload domain selection (references UploadDomain)
  uploadDomainId String?
  uploadDomain   UploadDomain? @relation(fields: [uploadDomainId], references: [id])
  customSubdomain String?  // User's custom subdomain (e.g., "files", "cdn", "cute")
  
  // URL/Shortcode preferences
  useCustomWords Boolean @default(false) // Use cute words instead of random chars
  
  // Global expiration and view limit settings
  defaultExpirationDays Int? // Default days until files expire (null = never)
  defaultMaxViews Int? // Default max views before files are deleted (null = unlimited)
  
  // Global particle configuration for site background
  globalParticleConfig String?  // JSON string for global particle configuration
  
  // Bio service fields
  bioUsername       String?  @unique // Custom username for bio page (e.g., "cutie" -> domain.com/cutie)
  bioDisplayName    String?  // Display name on bio page
  bioDescription    String?  // Bio description/about section
  bioProfileImage   String?  // Profile image URL
  bioBackgroundImage String? // Background image URL
  bioBackgroundColor String? @default("#8B5CF6") // Background color (fallback when no image)
  bioTextColor      String?  @default("#FFFFFF") // Text color
  bioAccentColor    String?  @default("#F59E0B") // Accent color for links/buttons
  bioCustomCss      String?  // Custom CSS for advanced users
  bioSpotifyTrack   String?  // Spotify track/playlist URL
  bioIsPublic       Boolean  @default(false) // Whether bio page is public
  bioViews          Int      @default(0) // Total bio page views
  bioLastViewed     DateTime? // Last time bio was viewed
  
  // Bio background effects
  bioGradientConfig String?  // JSON string for gradient configuration
  bioParticleConfig String?  // JSON string for particle configuration
  
  // Discord integration via Lanyard API
  bioDiscordUserId  String?  // Discord user ID for Lanyard API
  bioShowDiscord    Boolean  @default(false) // Whether to show Discord status
  bioDiscordConfig  String?  // JSON string for Discord display configuration
  
  // Bio service limits (null = use global defaults)
  maxBioLinks       Int?     @default(10) // Maximum number of bio links
  maxUsernameLength Int?     @default(20) // Maximum username length
  maxDisplayNameLength Int?  @default(20) // Maximum display name length
  maxDescriptionLength Int?  @default(1000) // Maximum description length
  maxUrlLength      Int?     @default(200) // Maximum URL length
  maxLinkTitleLength Int?    @default(50) // Maximum link title length
  maxIconLength     Int?     @default(20) // Maximum icon length
  
  // Auth.js relations
  accounts Account[]
  sessions Session[]
  
  // App relations
  uploads  Upload[]
  apiKeys  ApiKey[]
  systemEvents SystemEvent[]
  bioLinks BioLink[] // Bio links
  bioViewLogs BioView[] // Bio view logs
  
  @@map("users")
}

model Upload {
  id          String   @id @default(cuid())
  filename    String   // Stored filename
  originalName String  // Original upload name
  mimeType    String
  size        Int
  url         String   @unique // Full URL
  shortCode   String   @unique // Short identifier
  deletionKey String   @unique
  
  // Image dimensions (for images only)
  width       Int?     // Image width in pixels
  height      Int?     // Image height in pixels
  
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  
  // Per-file expiration and view limits (overrides user defaults)
  maxViews    Int? // Max views before deletion (null = use user default or unlimited)
  
  // User association (nullable for anonymous uploads)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Analytics
  views       Int      @default(0)
  downloads   Int      @default(0)
  lastViewed  DateTime?
  lastDownloaded DateTime?
  viewLogs    ViewLog[]
  downloadLogs DownloadLog[]
  
  @@map("uploads")
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  lastUsed  DateTime?
  isActive  Boolean  @default(true)
  
  @@map("api_keys")
}

model DailyAnalytics {
  id              String   @id @default(cuid())
  date            DateTime @unique
  totalViews      Int      @default(0)
  uniqueViews     Int      @default(0)
  totalDownloads  Int      @default(0)
  uniqueDownloads Int      @default(0)
  uploadsCount    Int      @default(0)
  usersRegistered Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("daily_analytics")
}

model ViewLog {
  id        String   @id @default(cuid())
  uploadId  String
  upload    Upload   @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  
  // Analytics data
  ipAddress String?
  userAgent String?
  referer   String?
  
  viewedAt  DateTime @default(now())
  
  @@index([uploadId])
  @@index([viewedAt])
  @@index([ipAddress, uploadId, viewedAt])
  @@map("view_logs")
}

model DownloadLog {
  id        String   @id @default(cuid())
  uploadId  String
  upload    Upload   @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  
  // Analytics data
  ipAddress String?
  userAgent String?
  referer   String?
  
  downloadedAt DateTime @default(now())
  
  @@index([uploadId])
  @@index([downloadedAt])
  @@index([ipAddress, uploadId, downloadedAt])
  @@map("download_logs")
}

model UploadDomain {
  id          String   @id @default(cuid())
  domain      String   @unique // e.g., "files.twink.forsale", "cdn.twink.forsale"
  name        String   // Display name e.g., "Files", "CDN"
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  
  @@map("upload_domains")
}

model SystemEvent {
  id          String   @id @default(cuid())
  type        String   // e.g., "USER_STORAGE_WARNING", "SYSTEM_STORAGE_WARNING", "HIGH_CPU_USAGE"
  severity    String   // "INFO", "WARNING", "ERROR", "CRITICAL"
  title       String
  message     String
  metadata    Json?    // Additional event data
  
  // User association (nullable for system-wide events)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // System metrics at time of event
  cpuUsage    Float?
  memoryUsage Float?
  diskUsage   Float?
  
  createdAt   DateTime @default(now())
  
  @@index([type])
  @@index([severity])
  @@index([userId])
  @@index([createdAt])
  @@map("system_events")
}

model SystemAlert {
  id          String   @id @default(cuid())
  eventType   String   // Type of event to monitor
  threshold   Float    // Threshold value (percentage, count, etc.)
  isActive    Boolean  @default(true)
  
  // Alert configuration
  name        String
  description String?
  cooldownMinutes Int @default(60) // Cooldown period to prevent spam
  
  // Notification settings
  notifyAdmins Boolean @default(true)
  notifyUser   Boolean @default(false) // For user-specific alerts
  
  lastTriggered DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("system_alerts")
}

// Bio links (like Linktree)
model BioLink {
  id       String  @id @default(cuid())
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title    String  // Link title/name
  url      String  // Link URL
  icon     String? // Icon name or emoji
  order    Int     @default(0) // Display order
  isActive Boolean @default(true)
  
  // Analytics
  clicks   Int     @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId, order])
  @@map("bio_links")
}

// Bio page view tracking
model BioView {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Analytics data
  ipAddress String?
  userAgent String?
  referer   String?
  
  viewedAt DateTime @default(now())
  
  @@index([userId])
  @@index([viewedAt])
  @@index([ipAddress, userId, viewedAt])
  @@map("bio_views")
}